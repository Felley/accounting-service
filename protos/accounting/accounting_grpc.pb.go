// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeAccountingClient is the client API for EmployeeAccounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeAccountingClient interface {
	AddEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error)
	UpdateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error)
	GetEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error)
	DeleteEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error)
}

type employeeAccountingClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeAccountingClient(cc grpc.ClientConnInterface) EmployeeAccountingClient {
	return &employeeAccountingClient{cc}
}

func (c *employeeAccountingClient) AddEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error) {
	out := new(EmployeeResponce)
	err := c.cc.Invoke(ctx, "/EmployeeAccounting/AddEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeAccountingClient) UpdateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error) {
	out := new(EmployeeResponce)
	err := c.cc.Invoke(ctx, "/EmployeeAccounting/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeAccountingClient) GetEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error) {
	out := new(EmployeeResponce)
	err := c.cc.Invoke(ctx, "/EmployeeAccounting/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeAccountingClient) DeleteEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponce, error) {
	out := new(EmployeeResponce)
	err := c.cc.Invoke(ctx, "/EmployeeAccounting/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeAccountingServer is the server API for EmployeeAccounting service.
// All implementations must embed UnimplementedEmployeeAccountingServer
// for forward compatibility
type EmployeeAccountingServer interface {
	AddEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error)
	UpdateEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error)
	GetEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error)
	DeleteEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error)
	mustEmbedUnimplementedEmployeeAccountingServer()
}

// UnimplementedEmployeeAccountingServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeAccountingServer struct {
}

func (UnimplementedEmployeeAccountingServer) AddEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployee not implemented")
}
func (UnimplementedEmployeeAccountingServer) UpdateEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedEmployeeAccountingServer) GetEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeAccountingServer) DeleteEmployee(context.Context, *EmployeeRequest) (*EmployeeResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeAccountingServer) mustEmbedUnimplementedEmployeeAccountingServer() {}

// UnsafeEmployeeAccountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeAccountingServer will
// result in compilation errors.
type UnsafeEmployeeAccountingServer interface {
	mustEmbedUnimplementedEmployeeAccountingServer()
}

func RegisterEmployeeAccountingServer(s grpc.ServiceRegistrar, srv EmployeeAccountingServer) {
	s.RegisterService(&EmployeeAccounting_ServiceDesc, srv)
}

func _EmployeeAccounting_AddEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeAccountingServer).AddEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeAccounting/AddEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeAccountingServer).AddEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeAccounting_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeAccountingServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeAccounting/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeAccountingServer).UpdateEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeAccounting_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeAccountingServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeAccounting/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeAccountingServer).GetEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeAccounting_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeAccountingServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeAccounting/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeAccountingServer).DeleteEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeAccounting_ServiceDesc is the grpc.ServiceDesc for EmployeeAccounting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeAccounting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeAccounting",
	HandlerType: (*EmployeeAccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmployee",
			Handler:    _EmployeeAccounting_AddEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _EmployeeAccounting_UpdateEmployee_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeeAccounting_GetEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeAccounting_DeleteEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting.proto",
}

// CompanyAccountingClient is the client API for CompanyAccounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyAccountingClient interface {
	AddCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	GetCompanyEmployees(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
}

type companyAccountingClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyAccountingClient(cc grpc.ClientConnInterface) CompanyAccountingClient {
	return &companyAccountingClient{cc}
}

func (c *companyAccountingClient) AddCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, "/CompanyAccounting/AddCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAccountingClient) UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, "/CompanyAccounting/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAccountingClient) GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, "/CompanyAccounting/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAccountingClient) DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, "/CompanyAccounting/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAccountingClient) GetCompanyEmployees(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, "/CompanyAccounting/GetCompanyEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyAccountingServer is the server API for CompanyAccounting service.
// All implementations must embed UnimplementedCompanyAccountingServer
// for forward compatibility
type CompanyAccountingServer interface {
	AddCompany(context.Context, *CompanyRequest) (*CompanyResponce, error)
	UpdateCompany(context.Context, *CompanyRequest) (*CompanyResponce, error)
	GetCompany(context.Context, *CompanyRequest) (*CompanyResponce, error)
	DeleteCompany(context.Context, *CompanyRequest) (*CompanyResponce, error)
	GetCompanyEmployees(context.Context, *CompanyRequest) (*CompanyResponce, error)
	mustEmbedUnimplementedCompanyAccountingServer()
}

// UnimplementedCompanyAccountingServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyAccountingServer struct {
}

func (UnimplementedCompanyAccountingServer) AddCompany(context.Context, *CompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompany not implemented")
}
func (UnimplementedCompanyAccountingServer) UpdateCompany(context.Context, *CompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyAccountingServer) GetCompany(context.Context, *CompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyAccountingServer) DeleteCompany(context.Context, *CompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedCompanyAccountingServer) GetCompanyEmployees(context.Context, *CompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyEmployees not implemented")
}
func (UnimplementedCompanyAccountingServer) mustEmbedUnimplementedCompanyAccountingServer() {}

// UnsafeCompanyAccountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyAccountingServer will
// result in compilation errors.
type UnsafeCompanyAccountingServer interface {
	mustEmbedUnimplementedCompanyAccountingServer()
}

func RegisterCompanyAccountingServer(s grpc.ServiceRegistrar, srv CompanyAccountingServer) {
	s.RegisterService(&CompanyAccounting_ServiceDesc, srv)
}

func _CompanyAccounting_AddCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAccountingServer).AddCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyAccounting/AddCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAccountingServer).AddCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAccounting_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAccountingServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyAccounting/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAccountingServer).UpdateCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAccounting_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAccountingServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyAccounting/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAccountingServer).GetCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAccounting_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAccountingServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyAccounting/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAccountingServer).DeleteCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAccounting_GetCompanyEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAccountingServer).GetCompanyEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyAccounting/GetCompanyEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAccountingServer).GetCompanyEmployees(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyAccounting_ServiceDesc is the grpc.ServiceDesc for CompanyAccounting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyAccounting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompanyAccounting",
	HandlerType: (*CompanyAccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCompany",
			Handler:    _CompanyAccounting_AddCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyAccounting_UpdateCompany_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyAccounting_GetCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _CompanyAccounting_DeleteCompany_Handler,
		},
		{
			MethodName: "GetCompanyEmployees",
			Handler:    _CompanyAccounting_GetCompanyEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting.proto",
}
